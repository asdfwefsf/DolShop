package com.company.dolshop.model

// domain layer에서 entity를 만들 때 entity에 ui와 관련된 코드를 넣을 수 없기 때문에 ,
// domain layer에 들어갈 수 는 없지만 필요한 entity가 생기면 넣어줄 폴더야.

/*
presentation module에 model 폴더를 만든 이유

presentation module에 model 폴더를 만드는 이유는 클린 아키텍처 원칙을 따르기 위함이에요.
클린 아키텍처에서는 각 계층(layer)이 엄격하게 분리되어 있어야 하며, 각각의 역할에 맞게 책임을 지니고 있어야 해요.
특히, domain layer는 애플리케이션의 비즈니스 로직과 관련된 핵심 기능을 담당하는데, 이 계층은 UI(사용자 인터페이스)나 프레젠테이션 로직과는 독립적이어야 합니다.

하지만 실제 애플리케이션을 개발하다 보면, UI에 특화된 데이터 모델이 필요한 경우가 생겨요.
예를 들어, 사용자에게 보여주기 위한 형식으로 데이터를 가공하는 등의 경우죠.
이런 UI 관련 코드를 domain layer의 entity에 넣게 되면, 계층 간의 역할이 모호해지고, 결합도가 높아져서 유지 보수성이나 확장성이 떨어질 수 있어요.

그래서 presentation module 내에 model 폴더를 별도로 만들어 UI에 특화된 데이터 모델을 관리하게 됩니다.
이는 domain layer와 프레젠테이션 계층 사이의 관심사를 분리하여, 각 계층이 자신의 역할에만 집중할 수 있도록 돕는 구조적인 방법이에요.

결국, 이러한 구조는 애플리케이션의 유지 보수성, 확장성, 그리고 테스트 용이성을 향상시키는 데 도움을 줍니다.

*/

/*
Presentation Module에서 model 폴더를 만드는 이유는 UI에 보여줄 데이터 모델을 별도로 관리하기 위해서이다.

UI에 특화된 데이터 모델이란 사용자 인터페이스(UI)에서 최적으로 사용될 수 있도록 설계된 데이터의 구조를 의미해요.

이는 사용자에게 보여지는 정보, 사용자의 입력을 받는 방식 등 UI 설계에 최적화된 형태로 데이터를 조직화하는 것을 목적으로 합니다.

예를 들어, 소셜 미디어 앱에서 사용자의 프로필 정보를 보여주는 경우를 생각해볼게요.

백엔드에서는 사용자의 이름, 이메일, 가입 날짜, 팔로워 수 등 다양한 정보를 관리하지만,
UI에 특화된 데이터 모델을 사용하여 프로필 화면에는 사용자의 이름, 프로필 사진, 팔로워 수, 팔로잉 수만을 간략하게 보여주도록 할 수 있어요.
이렇게 하면 사용자는 자신에게 중요한 정보만을 신속하게 파악할 수 있게 되죠.

또 다른 예로는 온라인 쇼핑몰의 상품 목록입니다.
백엔드에서는 상품의 ID, 이름, 가격, 재고량, 상품 설명 등 많은 정보를 관리하겠지만, 사용자가 상품 목록을 볼 때는 상품의 이미지, 이름, 가격만을 보여주는 것이 일반적이에요.
사용자가 상품에 대해 더 자세히 알고 싶을 때만 상품 설명이나 재고량 등의 추가 정보를 제공하는 방식이죠.

이러한 UI에 특화된 데이터 모델은 사용자 경험을 개선하기 위해 필요한 정보만을 선택적으로 제공하고, 데이터를 사용자에게 더 친숙하거나 이해하기 쉬운 형태로 가공하는 데 초점을 맞춥니다.
 */